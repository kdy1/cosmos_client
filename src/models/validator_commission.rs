/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ValidatorCommission {
  #[serde(rename = "rate")]
  rate: Option<String>,
  #[serde(rename = "max_rate")]
  max_rate: Option<String>,
  #[serde(rename = "max_change_rate")]
  max_change_rate: Option<String>,
  #[serde(rename = "update_time")]
  update_time: Option<String>
}

impl ValidatorCommission {
  pub fn new() -> ValidatorCommission {
    ValidatorCommission {
      rate: None,
      max_rate: None,
      max_change_rate: None,
      update_time: None
    }
  }

  pub fn set_rate(&mut self, rate: String) {
    self.rate = Some(rate);
  }

  pub fn with_rate(mut self, rate: String) -> ValidatorCommission {
    self.rate = Some(rate);
    self
  }

  pub fn rate(&self) -> Option<&String> {
    self.rate.as_ref()
  }

  pub fn reset_rate(&mut self) {
    self.rate = None;
  }

  pub fn set_max_rate(&mut self, max_rate: String) {
    self.max_rate = Some(max_rate);
  }

  pub fn with_max_rate(mut self, max_rate: String) -> ValidatorCommission {
    self.max_rate = Some(max_rate);
    self
  }

  pub fn max_rate(&self) -> Option<&String> {
    self.max_rate.as_ref()
  }

  pub fn reset_max_rate(&mut self) {
    self.max_rate = None;
  }

  pub fn set_max_change_rate(&mut self, max_change_rate: String) {
    self.max_change_rate = Some(max_change_rate);
  }

  pub fn with_max_change_rate(mut self, max_change_rate: String) -> ValidatorCommission {
    self.max_change_rate = Some(max_change_rate);
    self
  }

  pub fn max_change_rate(&self) -> Option<&String> {
    self.max_change_rate.as_ref()
  }

  pub fn reset_max_change_rate(&mut self) {
    self.max_change_rate = None;
  }

  pub fn set_update_time(&mut self, update_time: String) {
    self.update_time = Some(update_time);
  }

  pub fn with_update_time(mut self, update_time: String) -> ValidatorCommission {
    self.update_time = Some(update_time);
    self
  }

  pub fn update_time(&self) -> Option<&String> {
    self.update_time.as_ref()
  }

  pub fn reset_update_time(&mut self) {
    self.update_time = None;
  }

}



