/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Block {
  #[serde(rename = "header")]
  header: Option<::models::BlockHeader>,
  #[serde(rename = "txs")]
  txs: Option<Vec<String>>,
  #[serde(rename = "evidence")]
  evidence: Option<Vec<String>>,
  #[serde(rename = "last_commit")]
  last_commit: Option<::models::BlockLastCommit>
}

impl Block {
  pub fn new() -> Block {
    Block {
      header: None,
      txs: None,
      evidence: None,
      last_commit: None
    }
  }

  pub fn set_header(&mut self, header: ::models::BlockHeader) {
    self.header = Some(header);
  }

  pub fn with_header(mut self, header: ::models::BlockHeader) -> Block {
    self.header = Some(header);
    self
  }

  pub fn header(&self) -> Option<&::models::BlockHeader> {
    self.header.as_ref()
  }

  pub fn reset_header(&mut self) {
    self.header = None;
  }

  pub fn set_txs(&mut self, txs: Vec<String>) {
    self.txs = Some(txs);
  }

  pub fn with_txs(mut self, txs: Vec<String>) -> Block {
    self.txs = Some(txs);
    self
  }

  pub fn txs(&self) -> Option<&Vec<String>> {
    self.txs.as_ref()
  }

  pub fn reset_txs(&mut self) {
    self.txs = None;
  }

  pub fn set_evidence(&mut self, evidence: Vec<String>) {
    self.evidence = Some(evidence);
  }

  pub fn with_evidence(mut self, evidence: Vec<String>) -> Block {
    self.evidence = Some(evidence);
    self
  }

  pub fn evidence(&self) -> Option<&Vec<String>> {
    self.evidence.as_ref()
  }

  pub fn reset_evidence(&mut self) {
    self.evidence = None;
  }

  pub fn set_last_commit(&mut self, last_commit: ::models::BlockLastCommit) {
    self.last_commit = Some(last_commit);
  }

  pub fn with_last_commit(mut self, last_commit: ::models::BlockLastCommit) -> Block {
    self.last_commit = Some(last_commit);
    self
  }

  pub fn last_commit(&self) -> Option<&::models::BlockLastCommit> {
    self.last_commit.as_ref()
  }

  pub fn reset_last_commit(&mut self) {
    self.last_commit = None;
  }

}



