/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse2004 {
  #[serde(rename = "loose_tokens")]
  loose_tokens: Option<String>,
  #[serde(rename = "bonded_tokens")]
  bonded_tokens: Option<String>,
  #[serde(rename = "inflation_last_time")]
  inflation_last_time: Option<String>,
  #[serde(rename = "inflation")]
  inflation: Option<String>,
  #[serde(rename = "date_last_commission_reset")]
  date_last_commission_reset: Option<String>,
  #[serde(rename = "prev_bonded_shares")]
  prev_bonded_shares: Option<String>
}

impl InlineResponse2004 {
  pub fn new() -> InlineResponse2004 {
    InlineResponse2004 {
      loose_tokens: None,
      bonded_tokens: None,
      inflation_last_time: None,
      inflation: None,
      date_last_commission_reset: None,
      prev_bonded_shares: None
    }
  }

  pub fn set_loose_tokens(&mut self, loose_tokens: String) {
    self.loose_tokens = Some(loose_tokens);
  }

  pub fn with_loose_tokens(mut self, loose_tokens: String) -> InlineResponse2004 {
    self.loose_tokens = Some(loose_tokens);
    self
  }

  pub fn loose_tokens(&self) -> Option<&String> {
    self.loose_tokens.as_ref()
  }

  pub fn reset_loose_tokens(&mut self) {
    self.loose_tokens = None;
  }

  pub fn set_bonded_tokens(&mut self, bonded_tokens: String) {
    self.bonded_tokens = Some(bonded_tokens);
  }

  pub fn with_bonded_tokens(mut self, bonded_tokens: String) -> InlineResponse2004 {
    self.bonded_tokens = Some(bonded_tokens);
    self
  }

  pub fn bonded_tokens(&self) -> Option<&String> {
    self.bonded_tokens.as_ref()
  }

  pub fn reset_bonded_tokens(&mut self) {
    self.bonded_tokens = None;
  }

  pub fn set_inflation_last_time(&mut self, inflation_last_time: String) {
    self.inflation_last_time = Some(inflation_last_time);
  }

  pub fn with_inflation_last_time(mut self, inflation_last_time: String) -> InlineResponse2004 {
    self.inflation_last_time = Some(inflation_last_time);
    self
  }

  pub fn inflation_last_time(&self) -> Option<&String> {
    self.inflation_last_time.as_ref()
  }

  pub fn reset_inflation_last_time(&mut self) {
    self.inflation_last_time = None;
  }

  pub fn set_inflation(&mut self, inflation: String) {
    self.inflation = Some(inflation);
  }

  pub fn with_inflation(mut self, inflation: String) -> InlineResponse2004 {
    self.inflation = Some(inflation);
    self
  }

  pub fn inflation(&self) -> Option<&String> {
    self.inflation.as_ref()
  }

  pub fn reset_inflation(&mut self) {
    self.inflation = None;
  }

  pub fn set_date_last_commission_reset(&mut self, date_last_commission_reset: String) {
    self.date_last_commission_reset = Some(date_last_commission_reset);
  }

  pub fn with_date_last_commission_reset(mut self, date_last_commission_reset: String) -> InlineResponse2004 {
    self.date_last_commission_reset = Some(date_last_commission_reset);
    self
  }

  pub fn date_last_commission_reset(&self) -> Option<&String> {
    self.date_last_commission_reset.as_ref()
  }

  pub fn reset_date_last_commission_reset(&mut self) {
    self.date_last_commission_reset = None;
  }

  pub fn set_prev_bonded_shares(&mut self, prev_bonded_shares: String) {
    self.prev_bonded_shares = Some(prev_bonded_shares);
  }

  pub fn with_prev_bonded_shares(mut self, prev_bonded_shares: String) -> InlineResponse2004 {
    self.prev_bonded_shares = Some(prev_bonded_shares);
    self
  }

  pub fn prev_bonded_shares(&self) -> Option<&String> {
    self.prev_bonded_shares.as_ref()
  }

  pub fn reset_prev_bonded_shares(&mut self) {
    self.prev_bonded_shares = None;
  }

}



