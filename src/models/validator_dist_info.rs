/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ValidatorDistInfo {
  #[serde(rename = "operator_address")]
  operator_address: Option<::models::ValidatorAddress>,
  #[serde(rename = "self_bond_rewards")]
  self_bond_rewards: Option<Vec<::models::Coin>>,
  #[serde(rename = "val_commission")]
  val_commission: Option<Vec<::models::Coin>>
}

impl ValidatorDistInfo {
  pub fn new() -> ValidatorDistInfo {
    ValidatorDistInfo {
      operator_address: None,
      self_bond_rewards: None,
      val_commission: None
    }
  }

  pub fn set_operator_address(&mut self, operator_address: ::models::ValidatorAddress) {
    self.operator_address = Some(operator_address);
  }

  pub fn with_operator_address(mut self, operator_address: ::models::ValidatorAddress) -> ValidatorDistInfo {
    self.operator_address = Some(operator_address);
    self
  }

  pub fn operator_address(&self) -> Option<&::models::ValidatorAddress> {
    self.operator_address.as_ref()
  }

  pub fn reset_operator_address(&mut self) {
    self.operator_address = None;
  }

  pub fn set_self_bond_rewards(&mut self, self_bond_rewards: Vec<::models::Coin>) {
    self.self_bond_rewards = Some(self_bond_rewards);
  }

  pub fn with_self_bond_rewards(mut self, self_bond_rewards: Vec<::models::Coin>) -> ValidatorDistInfo {
    self.self_bond_rewards = Some(self_bond_rewards);
    self
  }

  pub fn self_bond_rewards(&self) -> Option<&Vec<::models::Coin>> {
    self.self_bond_rewards.as_ref()
  }

  pub fn reset_self_bond_rewards(&mut self) {
    self.self_bond_rewards = None;
  }

  pub fn set_val_commission(&mut self, val_commission: Vec<::models::Coin>) {
    self.val_commission = Some(val_commission);
  }

  pub fn with_val_commission(mut self, val_commission: Vec<::models::Coin>) -> ValidatorDistInfo {
    self.val_commission = Some(val_commission);
    self
  }

  pub fn val_commission(&self) -> Option<&Vec<::models::Coin>> {
    self.val_commission.as_ref()
  }

  pub fn reset_val_commission(&mut self) {
    self.val_commission = None;
  }

}



