/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BaseReq {
  /// Sender address or Keybase name to generate a transaction
  #[serde(rename = "from")]
  from: Option<String>,
  #[serde(rename = "memo")]
  memo: Option<String>,
  #[serde(rename = "chain_id")]
  chain_id: Option<String>,
  #[serde(rename = "account_number")]
  account_number: Option<String>,
  #[serde(rename = "sequence")]
  sequence: Option<String>,
  #[serde(rename = "gas")]
  gas: Option<String>,
  #[serde(rename = "gas_adjustment")]
  gas_adjustment: Option<String>,
  #[serde(rename = "fees")]
  fees: Option<Vec<::models::Coin>>,
  /// Estimate gas for a transaction (cannot be used in conjunction with generate_only)
  #[serde(rename = "simulate")]
  simulate: Option<bool>
}

impl BaseReq {
  pub fn new() -> BaseReq {
    BaseReq {
      from: None,
      memo: None,
      chain_id: None,
      account_number: None,
      sequence: None,
      gas: None,
      gas_adjustment: None,
      fees: None,
      simulate: None
    }
  }

  pub fn set_from(&mut self, from: String) {
    self.from = Some(from);
  }

  pub fn with_from(mut self, from: String) -> BaseReq {
    self.from = Some(from);
    self
  }

  pub fn from(&self) -> Option<&String> {
    self.from.as_ref()
  }

  pub fn reset_from(&mut self) {
    self.from = None;
  }

  pub fn set_memo(&mut self, memo: String) {
    self.memo = Some(memo);
  }

  pub fn with_memo(mut self, memo: String) -> BaseReq {
    self.memo = Some(memo);
    self
  }

  pub fn memo(&self) -> Option<&String> {
    self.memo.as_ref()
  }

  pub fn reset_memo(&mut self) {
    self.memo = None;
  }

  pub fn set_chain_id(&mut self, chain_id: String) {
    self.chain_id = Some(chain_id);
  }

  pub fn with_chain_id(mut self, chain_id: String) -> BaseReq {
    self.chain_id = Some(chain_id);
    self
  }

  pub fn chain_id(&self) -> Option<&String> {
    self.chain_id.as_ref()
  }

  pub fn reset_chain_id(&mut self) {
    self.chain_id = None;
  }

  pub fn set_account_number(&mut self, account_number: String) {
    self.account_number = Some(account_number);
  }

  pub fn with_account_number(mut self, account_number: String) -> BaseReq {
    self.account_number = Some(account_number);
    self
  }

  pub fn account_number(&self) -> Option<&String> {
    self.account_number.as_ref()
  }

  pub fn reset_account_number(&mut self) {
    self.account_number = None;
  }

  pub fn set_sequence(&mut self, sequence: String) {
    self.sequence = Some(sequence);
  }

  pub fn with_sequence(mut self, sequence: String) -> BaseReq {
    self.sequence = Some(sequence);
    self
  }

  pub fn sequence(&self) -> Option<&String> {
    self.sequence.as_ref()
  }

  pub fn reset_sequence(&mut self) {
    self.sequence = None;
  }

  pub fn set_gas(&mut self, gas: String) {
    self.gas = Some(gas);
  }

  pub fn with_gas(mut self, gas: String) -> BaseReq {
    self.gas = Some(gas);
    self
  }

  pub fn gas(&self) -> Option<&String> {
    self.gas.as_ref()
  }

  pub fn reset_gas(&mut self) {
    self.gas = None;
  }

  pub fn set_gas_adjustment(&mut self, gas_adjustment: String) {
    self.gas_adjustment = Some(gas_adjustment);
  }

  pub fn with_gas_adjustment(mut self, gas_adjustment: String) -> BaseReq {
    self.gas_adjustment = Some(gas_adjustment);
    self
  }

  pub fn gas_adjustment(&self) -> Option<&String> {
    self.gas_adjustment.as_ref()
  }

  pub fn reset_gas_adjustment(&mut self) {
    self.gas_adjustment = None;
  }

  pub fn set_fees(&mut self, fees: Vec<::models::Coin>) {
    self.fees = Some(fees);
  }

  pub fn with_fees(mut self, fees: Vec<::models::Coin>) -> BaseReq {
    self.fees = Some(fees);
    self
  }

  pub fn fees(&self) -> Option<&Vec<::models::Coin>> {
    self.fees.as_ref()
  }

  pub fn reset_fees(&mut self) {
    self.fees = None;
  }

  pub fn set_simulate(&mut self, simulate: bool) {
    self.simulate = Some(simulate);
  }

  pub fn with_simulate(mut self, simulate: bool) -> BaseReq {
    self.simulate = Some(simulate);
    self
  }

  pub fn simulate(&self) -> Option<&bool> {
    self.simulate.as_ref()
  }

  pub fn reset_simulate(&mut self) {
    self.simulate = None;
  }

}



