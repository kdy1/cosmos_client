/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Vote {
  #[serde(rename = "voter")]
  voter: Option<String>,
  #[serde(rename = "proposal_id")]
  proposal_id: Option<i32>,
  #[serde(rename = "option")]
  option: Option<String>
}

impl Vote {
  pub fn new() -> Vote {
    Vote {
      voter: None,
      proposal_id: None,
      option: None
    }
  }

  pub fn set_voter(&mut self, voter: String) {
    self.voter = Some(voter);
  }

  pub fn with_voter(mut self, voter: String) -> Vote {
    self.voter = Some(voter);
    self
  }

  pub fn voter(&self) -> Option<&String> {
    self.voter.as_ref()
  }

  pub fn reset_voter(&mut self) {
    self.voter = None;
  }

  pub fn set_proposal_id(&mut self, proposal_id: i32) {
    self.proposal_id = Some(proposal_id);
  }

  pub fn with_proposal_id(mut self, proposal_id: i32) -> Vote {
    self.proposal_id = Some(proposal_id);
    self
  }

  pub fn proposal_id(&self) -> Option<&i32> {
    self.proposal_id.as_ref()
  }

  pub fn reset_proposal_id(&mut self) {
    self.proposal_id = None;
  }

  pub fn set_option(&mut self, option: String) {
    self.option = Some(option);
  }

  pub fn with_option(mut self, option: String) -> Vote {
    self.option = Some(option);
    self
  }

  pub fn option(&self) -> Option<&String> {
    self.option.as_ref()
  }

  pub fn reset_option(&mut self) {
    self.option = None;
  }

}



