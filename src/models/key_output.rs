/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct KeyOutput {
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "address")]
  address: Option<String>,
  #[serde(rename = "pub_key")]
  pub_key: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "seed")]
  seed: Option<String>
}

impl KeyOutput {
  pub fn new() -> KeyOutput {
    KeyOutput {
      name: None,
      address: None,
      pub_key: None,
      _type: None,
      seed: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> KeyOutput {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_address(&mut self, address: String) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: String) -> KeyOutput {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&String> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_pub_key(&mut self, pub_key: String) {
    self.pub_key = Some(pub_key);
  }

  pub fn with_pub_key(mut self, pub_key: String) -> KeyOutput {
    self.pub_key = Some(pub_key);
    self
  }

  pub fn pub_key(&self) -> Option<&String> {
    self.pub_key.as_ref()
  }

  pub fn reset_pub_key(&mut self) {
    self.pub_key = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> KeyOutput {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_seed(&mut self, seed: String) {
    self.seed = Some(seed);
  }

  pub fn with_seed(mut self, seed: String) -> KeyOutput {
    self.seed = Some(seed);
    self
  }

  pub fn seed(&self) -> Option<&String> {
    self.seed.as_ref()
  }

  pub fn reset_seed(&mut self) {
    self.seed = None;
  }

}



