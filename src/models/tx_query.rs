/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TxQuery {
  #[serde(rename = "hash")]
  hash: Option<String>,
  #[serde(rename = "height")]
  height: Option<f32>,
  #[serde(rename = "tx")]
  tx: Option<::models::StdTx>,
  #[serde(rename = "result")]
  result: Option<::models::TxQueryResult>
}

impl TxQuery {
  pub fn new() -> TxQuery {
    TxQuery {
      hash: None,
      height: None,
      tx: None,
      result: None
    }
  }

  pub fn set_hash(&mut self, hash: String) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: String) -> TxQuery {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&String> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_height(&mut self, height: f32) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: f32) -> TxQuery {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&f32> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_tx(&mut self, tx: ::models::StdTx) {
    self.tx = Some(tx);
  }

  pub fn with_tx(mut self, tx: ::models::StdTx) -> TxQuery {
    self.tx = Some(tx);
    self
  }

  pub fn tx(&self) -> Option<&::models::StdTx> {
    self.tx.as_ref()
  }

  pub fn reset_tx(&mut self) {
    self.tx = None;
  }

  pub fn set_result(&mut self, result: ::models::TxQueryResult) {
    self.result = Some(result);
  }

  pub fn with_result(mut self, result: ::models::TxQueryResult) -> TxQuery {
    self.result = Some(result);
    self
  }

  pub fn result(&self) -> Option<&::models::TxQueryResult> {
    self.result.as_ref()
  }

  pub fn reset_result(&mut self) {
    self.result = None;
  }

}



