/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Validator {
  #[serde(rename = "operator_address")]
  operator_address: Option<::models::ValidatorAddress>,
  #[serde(rename = "consensus_pubkey")]
  consensus_pubkey: Option<String>,
  #[serde(rename = "jailed")]
  jailed: Option<bool>,
  #[serde(rename = "status")]
  status: Option<i32>,
  #[serde(rename = "tokens")]
  tokens: Option<String>,
  #[serde(rename = "delegator_shares")]
  delegator_shares: Option<String>,
  #[serde(rename = "description")]
  description: Option<::models::ValidatorDescription>,
  #[serde(rename = "bond_height")]
  bond_height: Option<String>,
  #[serde(rename = "bond_intra_tx_counter")]
  bond_intra_tx_counter: Option<i32>,
  #[serde(rename = "unbonding_height")]
  unbonding_height: Option<String>,
  #[serde(rename = "unbonding_time")]
  unbonding_time: Option<String>,
  #[serde(rename = "commission")]
  commission: Option<::models::ValidatorCommission>
}

impl Validator {
  pub fn new() -> Validator {
    Validator {
      operator_address: None,
      consensus_pubkey: None,
      jailed: None,
      status: None,
      tokens: None,
      delegator_shares: None,
      description: None,
      bond_height: None,
      bond_intra_tx_counter: None,
      unbonding_height: None,
      unbonding_time: None,
      commission: None
    }
  }

  pub fn set_operator_address(&mut self, operator_address: ::models::ValidatorAddress) {
    self.operator_address = Some(operator_address);
  }

  pub fn with_operator_address(mut self, operator_address: ::models::ValidatorAddress) -> Validator {
    self.operator_address = Some(operator_address);
    self
  }

  pub fn operator_address(&self) -> Option<&::models::ValidatorAddress> {
    self.operator_address.as_ref()
  }

  pub fn reset_operator_address(&mut self) {
    self.operator_address = None;
  }

  pub fn set_consensus_pubkey(&mut self, consensus_pubkey: String) {
    self.consensus_pubkey = Some(consensus_pubkey);
  }

  pub fn with_consensus_pubkey(mut self, consensus_pubkey: String) -> Validator {
    self.consensus_pubkey = Some(consensus_pubkey);
    self
  }

  pub fn consensus_pubkey(&self) -> Option<&String> {
    self.consensus_pubkey.as_ref()
  }

  pub fn reset_consensus_pubkey(&mut self) {
    self.consensus_pubkey = None;
  }

  pub fn set_jailed(&mut self, jailed: bool) {
    self.jailed = Some(jailed);
  }

  pub fn with_jailed(mut self, jailed: bool) -> Validator {
    self.jailed = Some(jailed);
    self
  }

  pub fn jailed(&self) -> Option<&bool> {
    self.jailed.as_ref()
  }

  pub fn reset_jailed(&mut self) {
    self.jailed = None;
  }

  pub fn set_status(&mut self, status: i32) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: i32) -> Validator {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&i32> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_tokens(&mut self, tokens: String) {
    self.tokens = Some(tokens);
  }

  pub fn with_tokens(mut self, tokens: String) -> Validator {
    self.tokens = Some(tokens);
    self
  }

  pub fn tokens(&self) -> Option<&String> {
    self.tokens.as_ref()
  }

  pub fn reset_tokens(&mut self) {
    self.tokens = None;
  }

  pub fn set_delegator_shares(&mut self, delegator_shares: String) {
    self.delegator_shares = Some(delegator_shares);
  }

  pub fn with_delegator_shares(mut self, delegator_shares: String) -> Validator {
    self.delegator_shares = Some(delegator_shares);
    self
  }

  pub fn delegator_shares(&self) -> Option<&String> {
    self.delegator_shares.as_ref()
  }

  pub fn reset_delegator_shares(&mut self) {
    self.delegator_shares = None;
  }

  pub fn set_description(&mut self, description: ::models::ValidatorDescription) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: ::models::ValidatorDescription) -> Validator {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&::models::ValidatorDescription> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_bond_height(&mut self, bond_height: String) {
    self.bond_height = Some(bond_height);
  }

  pub fn with_bond_height(mut self, bond_height: String) -> Validator {
    self.bond_height = Some(bond_height);
    self
  }

  pub fn bond_height(&self) -> Option<&String> {
    self.bond_height.as_ref()
  }

  pub fn reset_bond_height(&mut self) {
    self.bond_height = None;
  }

  pub fn set_bond_intra_tx_counter(&mut self, bond_intra_tx_counter: i32) {
    self.bond_intra_tx_counter = Some(bond_intra_tx_counter);
  }

  pub fn with_bond_intra_tx_counter(mut self, bond_intra_tx_counter: i32) -> Validator {
    self.bond_intra_tx_counter = Some(bond_intra_tx_counter);
    self
  }

  pub fn bond_intra_tx_counter(&self) -> Option<&i32> {
    self.bond_intra_tx_counter.as_ref()
  }

  pub fn reset_bond_intra_tx_counter(&mut self) {
    self.bond_intra_tx_counter = None;
  }

  pub fn set_unbonding_height(&mut self, unbonding_height: String) {
    self.unbonding_height = Some(unbonding_height);
  }

  pub fn with_unbonding_height(mut self, unbonding_height: String) -> Validator {
    self.unbonding_height = Some(unbonding_height);
    self
  }

  pub fn unbonding_height(&self) -> Option<&String> {
    self.unbonding_height.as_ref()
  }

  pub fn reset_unbonding_height(&mut self) {
    self.unbonding_height = None;
  }

  pub fn set_unbonding_time(&mut self, unbonding_time: String) {
    self.unbonding_time = Some(unbonding_time);
  }

  pub fn with_unbonding_time(mut self, unbonding_time: String) -> Validator {
    self.unbonding_time = Some(unbonding_time);
    self
  }

  pub fn unbonding_time(&self) -> Option<&String> {
    self.unbonding_time.as_ref()
  }

  pub fn reset_unbonding_time(&mut self) {
    self.unbonding_time = None;
  }

  pub fn set_commission(&mut self, commission: ::models::ValidatorCommission) {
    self.commission = Some(commission);
  }

  pub fn with_commission(mut self, commission: ::models::ValidatorCommission) -> Validator {
    self.commission = Some(commission);
    self
  }

  pub fn commission(&self) -> Option<&::models::ValidatorCommission> {
    self.commission.as_ref()
  }

  pub fn reset_commission(&mut self) {
    self.commission = None;
  }

}



