/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ValidatorDescription {
  #[serde(rename = "moniker")]
  moniker: Option<String>,
  #[serde(rename = "identity")]
  identity: Option<String>,
  #[serde(rename = "website")]
  website: Option<String>,
  #[serde(rename = "details")]
  details: Option<String>
}

impl ValidatorDescription {
  pub fn new() -> ValidatorDescription {
    ValidatorDescription {
      moniker: None,
      identity: None,
      website: None,
      details: None
    }
  }

  pub fn set_moniker(&mut self, moniker: String) {
    self.moniker = Some(moniker);
  }

  pub fn with_moniker(mut self, moniker: String) -> ValidatorDescription {
    self.moniker = Some(moniker);
    self
  }

  pub fn moniker(&self) -> Option<&String> {
    self.moniker.as_ref()
  }

  pub fn reset_moniker(&mut self) {
    self.moniker = None;
  }

  pub fn set_identity(&mut self, identity: String) {
    self.identity = Some(identity);
  }

  pub fn with_identity(mut self, identity: String) -> ValidatorDescription {
    self.identity = Some(identity);
    self
  }

  pub fn identity(&self) -> Option<&String> {
    self.identity.as_ref()
  }

  pub fn reset_identity(&mut self) {
    self.identity = None;
  }

  pub fn set_website(&mut self, website: String) {
    self.website = Some(website);
  }

  pub fn with_website(mut self, website: String) -> ValidatorDescription {
    self.website = Some(website);
    self
  }

  pub fn website(&self) -> Option<&String> {
    self.website.as_ref()
  }

  pub fn reset_website(&mut self) {
    self.website = None;
  }

  pub fn set_details(&mut self, details: String) {
    self.details = Some(details);
  }

  pub fn with_details(mut self, details: String) -> ValidatorDescription {
    self.details = Some(details);
    self
  }

  pub fn details(&self) -> Option<&String> {
    self.details.as_ref()
  }

  pub fn reset_details(&mut self) {
    self.details = None;
  }

}



