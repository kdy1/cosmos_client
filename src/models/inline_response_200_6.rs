/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse2006 {
  #[serde(rename = "max_evidence_age")]
  max_evidence_age: Option<i32>,
  #[serde(rename = "signed_blocks_window")]
  signed_blocks_window: Option<i32>,
  #[serde(rename = "min_signed_per_window")]
  min_signed_per_window: Option<i32>,
  #[serde(rename = "double_sign_unbond_duration")]
  double_sign_unbond_duration: Option<i32>,
  #[serde(rename = "downtime_unbond_duration")]
  downtime_unbond_duration: Option<i32>,
  #[serde(rename = "slash_fraction_double_sign")]
  slash_fraction_double_sign: Option<i32>,
  #[serde(rename = "slash_fraction_downtime")]
  slash_fraction_downtime: Option<i32>
}

impl InlineResponse2006 {
  pub fn new() -> InlineResponse2006 {
    InlineResponse2006 {
      max_evidence_age: None,
      signed_blocks_window: None,
      min_signed_per_window: None,
      double_sign_unbond_duration: None,
      downtime_unbond_duration: None,
      slash_fraction_double_sign: None,
      slash_fraction_downtime: None
    }
  }

  pub fn set_max_evidence_age(&mut self, max_evidence_age: i32) {
    self.max_evidence_age = Some(max_evidence_age);
  }

  pub fn with_max_evidence_age(mut self, max_evidence_age: i32) -> InlineResponse2006 {
    self.max_evidence_age = Some(max_evidence_age);
    self
  }

  pub fn max_evidence_age(&self) -> Option<&i32> {
    self.max_evidence_age.as_ref()
  }

  pub fn reset_max_evidence_age(&mut self) {
    self.max_evidence_age = None;
  }

  pub fn set_signed_blocks_window(&mut self, signed_blocks_window: i32) {
    self.signed_blocks_window = Some(signed_blocks_window);
  }

  pub fn with_signed_blocks_window(mut self, signed_blocks_window: i32) -> InlineResponse2006 {
    self.signed_blocks_window = Some(signed_blocks_window);
    self
  }

  pub fn signed_blocks_window(&self) -> Option<&i32> {
    self.signed_blocks_window.as_ref()
  }

  pub fn reset_signed_blocks_window(&mut self) {
    self.signed_blocks_window = None;
  }

  pub fn set_min_signed_per_window(&mut self, min_signed_per_window: i32) {
    self.min_signed_per_window = Some(min_signed_per_window);
  }

  pub fn with_min_signed_per_window(mut self, min_signed_per_window: i32) -> InlineResponse2006 {
    self.min_signed_per_window = Some(min_signed_per_window);
    self
  }

  pub fn min_signed_per_window(&self) -> Option<&i32> {
    self.min_signed_per_window.as_ref()
  }

  pub fn reset_min_signed_per_window(&mut self) {
    self.min_signed_per_window = None;
  }

  pub fn set_double_sign_unbond_duration(&mut self, double_sign_unbond_duration: i32) {
    self.double_sign_unbond_duration = Some(double_sign_unbond_duration);
  }

  pub fn with_double_sign_unbond_duration(mut self, double_sign_unbond_duration: i32) -> InlineResponse2006 {
    self.double_sign_unbond_duration = Some(double_sign_unbond_duration);
    self
  }

  pub fn double_sign_unbond_duration(&self) -> Option<&i32> {
    self.double_sign_unbond_duration.as_ref()
  }

  pub fn reset_double_sign_unbond_duration(&mut self) {
    self.double_sign_unbond_duration = None;
  }

  pub fn set_downtime_unbond_duration(&mut self, downtime_unbond_duration: i32) {
    self.downtime_unbond_duration = Some(downtime_unbond_duration);
  }

  pub fn with_downtime_unbond_duration(mut self, downtime_unbond_duration: i32) -> InlineResponse2006 {
    self.downtime_unbond_duration = Some(downtime_unbond_duration);
    self
  }

  pub fn downtime_unbond_duration(&self) -> Option<&i32> {
    self.downtime_unbond_duration.as_ref()
  }

  pub fn reset_downtime_unbond_duration(&mut self) {
    self.downtime_unbond_duration = None;
  }

  pub fn set_slash_fraction_double_sign(&mut self, slash_fraction_double_sign: i32) {
    self.slash_fraction_double_sign = Some(slash_fraction_double_sign);
  }

  pub fn with_slash_fraction_double_sign(mut self, slash_fraction_double_sign: i32) -> InlineResponse2006 {
    self.slash_fraction_double_sign = Some(slash_fraction_double_sign);
    self
  }

  pub fn slash_fraction_double_sign(&self) -> Option<&i32> {
    self.slash_fraction_double_sign.as_ref()
  }

  pub fn reset_slash_fraction_double_sign(&mut self) {
    self.slash_fraction_double_sign = None;
  }

  pub fn set_slash_fraction_downtime(&mut self, slash_fraction_downtime: i32) {
    self.slash_fraction_downtime = Some(slash_fraction_downtime);
  }

  pub fn with_slash_fraction_downtime(mut self, slash_fraction_downtime: i32) -> InlineResponse2006 {
    self.slash_fraction_downtime = Some(slash_fraction_downtime);
    self
  }

  pub fn slash_fraction_downtime(&self) -> Option<&i32> {
    self.slash_fraction_downtime.as_ref()
  }

  pub fn reset_slash_fraction_downtime(&mut self) {
    self.slash_fraction_downtime = None;
  }

}



