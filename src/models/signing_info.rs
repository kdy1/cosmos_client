/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SigningInfo {
  #[serde(rename = "start_height")]
  start_height: Option<String>,
  #[serde(rename = "index_offset")]
  index_offset: Option<String>,
  #[serde(rename = "jailed_until")]
  jailed_until: Option<String>,
  #[serde(rename = "missed_blocks_counter")]
  missed_blocks_counter: Option<String>
}

impl SigningInfo {
  pub fn new() -> SigningInfo {
    SigningInfo {
      start_height: None,
      index_offset: None,
      jailed_until: None,
      missed_blocks_counter: None
    }
  }

  pub fn set_start_height(&mut self, start_height: String) {
    self.start_height = Some(start_height);
  }

  pub fn with_start_height(mut self, start_height: String) -> SigningInfo {
    self.start_height = Some(start_height);
    self
  }

  pub fn start_height(&self) -> Option<&String> {
    self.start_height.as_ref()
  }

  pub fn reset_start_height(&mut self) {
    self.start_height = None;
  }

  pub fn set_index_offset(&mut self, index_offset: String) {
    self.index_offset = Some(index_offset);
  }

  pub fn with_index_offset(mut self, index_offset: String) -> SigningInfo {
    self.index_offset = Some(index_offset);
    self
  }

  pub fn index_offset(&self) -> Option<&String> {
    self.index_offset.as_ref()
  }

  pub fn reset_index_offset(&mut self) {
    self.index_offset = None;
  }

  pub fn set_jailed_until(&mut self, jailed_until: String) {
    self.jailed_until = Some(jailed_until);
  }

  pub fn with_jailed_until(mut self, jailed_until: String) -> SigningInfo {
    self.jailed_until = Some(jailed_until);
    self
  }

  pub fn jailed_until(&self) -> Option<&String> {
    self.jailed_until.as_ref()
  }

  pub fn reset_jailed_until(&mut self) {
    self.jailed_until = None;
  }

  pub fn set_missed_blocks_counter(&mut self, missed_blocks_counter: String) {
    self.missed_blocks_counter = Some(missed_blocks_counter);
  }

  pub fn with_missed_blocks_counter(mut self, missed_blocks_counter: String) -> SigningInfo {
    self.missed_blocks_counter = Some(missed_blocks_counter);
    self
  }

  pub fn missed_blocks_counter(&self) -> Option<&String> {
    self.missed_blocks_counter.as_ref()
  }

  pub fn reset_missed_blocks_counter(&mut self) {
    self.missed_blocks_counter = None;
  }

}



