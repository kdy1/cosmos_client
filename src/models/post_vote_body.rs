/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PostVoteBody {
  #[serde(rename = "base_req")]
  base_req: Option<::models::BaseReq>,
  #[serde(rename = "voter")]
  voter: Option<::models::Address>,
  #[serde(rename = "option")]
  option: Option<String>
}

impl PostVoteBody {
  pub fn new() -> PostVoteBody {
    PostVoteBody {
      base_req: None,
      voter: None,
      option: None
    }
  }

  pub fn set_base_req(&mut self, base_req: ::models::BaseReq) {
    self.base_req = Some(base_req);
  }

  pub fn with_base_req(mut self, base_req: ::models::BaseReq) -> PostVoteBody {
    self.base_req = Some(base_req);
    self
  }

  pub fn base_req(&self) -> Option<&::models::BaseReq> {
    self.base_req.as_ref()
  }

  pub fn reset_base_req(&mut self) {
    self.base_req = None;
  }

  pub fn set_voter(&mut self, voter: ::models::Address) {
    self.voter = Some(voter);
  }

  pub fn with_voter(mut self, voter: ::models::Address) -> PostVoteBody {
    self.voter = Some(voter);
    self
  }

  pub fn voter(&self) -> Option<&::models::Address> {
    self.voter.as_ref()
  }

  pub fn reset_voter(&mut self) {
    self.voter = None;
  }

  pub fn set_option(&mut self, option: String) {
    self.option = Some(option);
  }

  pub fn with_option(mut self, option: String) -> PostVoteBody {
    self.option = Some(option);
    self
  }

  pub fn option(&self) -> Option<&String> {
    self.option.as_ref()
  }

  pub fn reset_option(&mut self) {
    self.option = None;
  }

}



