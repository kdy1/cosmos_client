/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Delegation1 {
  #[serde(rename = "base_req")]
  base_req: Option<::models::BaseReq>,
  #[serde(rename = "delegator_address")]
  delegator_address: Option<::models::Address>,
  #[serde(rename = "validator_address")]
  validator_address: Option<::models::ValidatorAddress>,
  #[serde(rename = "shares")]
  shares: Option<String>
}

impl Delegation1 {
  pub fn new() -> Delegation1 {
    Delegation1 {
      base_req: None,
      delegator_address: None,
      validator_address: None,
      shares: None
    }
  }

  pub fn set_base_req(&mut self, base_req: ::models::BaseReq) {
    self.base_req = Some(base_req);
  }

  pub fn with_base_req(mut self, base_req: ::models::BaseReq) -> Delegation1 {
    self.base_req = Some(base_req);
    self
  }

  pub fn base_req(&self) -> Option<&::models::BaseReq> {
    self.base_req.as_ref()
  }

  pub fn reset_base_req(&mut self) {
    self.base_req = None;
  }

  pub fn set_delegator_address(&mut self, delegator_address: ::models::Address) {
    self.delegator_address = Some(delegator_address);
  }

  pub fn with_delegator_address(mut self, delegator_address: ::models::Address) -> Delegation1 {
    self.delegator_address = Some(delegator_address);
    self
  }

  pub fn delegator_address(&self) -> Option<&::models::Address> {
    self.delegator_address.as_ref()
  }

  pub fn reset_delegator_address(&mut self) {
    self.delegator_address = None;
  }

  pub fn set_validator_address(&mut self, validator_address: ::models::ValidatorAddress) {
    self.validator_address = Some(validator_address);
  }

  pub fn with_validator_address(mut self, validator_address: ::models::ValidatorAddress) -> Delegation1 {
    self.validator_address = Some(validator_address);
    self
  }

  pub fn validator_address(&self) -> Option<&::models::ValidatorAddress> {
    self.validator_address.as_ref()
  }

  pub fn reset_validator_address(&mut self) {
    self.validator_address = None;
  }

  pub fn set_shares(&mut self, shares: String) {
    self.shares = Some(shares);
  }

  pub fn with_shares(mut self, shares: String) -> Delegation1 {
    self.shares = Some(shares);
    self
  }

  pub fn shares(&self) -> Option<&String> {
    self.shares.as_ref()
  }

  pub fn reset_shares(&mut self) {
    self.shares = None;
  }

}



