/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BlockLastCommitPrecommits {
  #[serde(rename = "validator_address")]
  validator_address: Option<String>,
  #[serde(rename = "validator_index")]
  validator_index: Option<String>,
  #[serde(rename = "height")]
  height: Option<String>,
  #[serde(rename = "round")]
  round: Option<String>,
  #[serde(rename = "timestamp")]
  timestamp: Option<String>,
  #[serde(rename = "type")]
  _type: Option<f32>,
  #[serde(rename = "block_id")]
  block_id: Option<::models::BlockId>,
  #[serde(rename = "signature")]
  signature: Option<String>
}

impl BlockLastCommitPrecommits {
  pub fn new() -> BlockLastCommitPrecommits {
    BlockLastCommitPrecommits {
      validator_address: None,
      validator_index: None,
      height: None,
      round: None,
      timestamp: None,
      _type: None,
      block_id: None,
      signature: None
    }
  }

  pub fn set_validator_address(&mut self, validator_address: String) {
    self.validator_address = Some(validator_address);
  }

  pub fn with_validator_address(mut self, validator_address: String) -> BlockLastCommitPrecommits {
    self.validator_address = Some(validator_address);
    self
  }

  pub fn validator_address(&self) -> Option<&String> {
    self.validator_address.as_ref()
  }

  pub fn reset_validator_address(&mut self) {
    self.validator_address = None;
  }

  pub fn set_validator_index(&mut self, validator_index: String) {
    self.validator_index = Some(validator_index);
  }

  pub fn with_validator_index(mut self, validator_index: String) -> BlockLastCommitPrecommits {
    self.validator_index = Some(validator_index);
    self
  }

  pub fn validator_index(&self) -> Option<&String> {
    self.validator_index.as_ref()
  }

  pub fn reset_validator_index(&mut self) {
    self.validator_index = None;
  }

  pub fn set_height(&mut self, height: String) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: String) -> BlockLastCommitPrecommits {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&String> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_round(&mut self, round: String) {
    self.round = Some(round);
  }

  pub fn with_round(mut self, round: String) -> BlockLastCommitPrecommits {
    self.round = Some(round);
    self
  }

  pub fn round(&self) -> Option<&String> {
    self.round.as_ref()
  }

  pub fn reset_round(&mut self) {
    self.round = None;
  }

  pub fn set_timestamp(&mut self, timestamp: String) {
    self.timestamp = Some(timestamp);
  }

  pub fn with_timestamp(mut self, timestamp: String) -> BlockLastCommitPrecommits {
    self.timestamp = Some(timestamp);
    self
  }

  pub fn timestamp(&self) -> Option<&String> {
    self.timestamp.as_ref()
  }

  pub fn reset_timestamp(&mut self) {
    self.timestamp = None;
  }

  pub fn set__type(&mut self, _type: f32) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: f32) -> BlockLastCommitPrecommits {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&f32> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_block_id(&mut self, block_id: ::models::BlockId) {
    self.block_id = Some(block_id);
  }

  pub fn with_block_id(mut self, block_id: ::models::BlockId) -> BlockLastCommitPrecommits {
    self.block_id = Some(block_id);
    self
  }

  pub fn block_id(&self) -> Option<&::models::BlockId> {
    self.block_id.as_ref()
  }

  pub fn reset_block_id(&mut self) {
    self.block_id = None;
  }

  pub fn set_signature(&mut self, signature: String) {
    self.signature = Some(signature);
  }

  pub fn with_signature(mut self, signature: String) -> BlockLastCommitPrecommits {
    self.signature = Some(signature);
    self
  }

  pub fn signature(&self) -> Option<&String> {
    self.signature.as_ref()
  }

  pub fn reset_signature(&mut self) {
    self.signature = None;
  }

}



