/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BlockQuery {
  #[serde(rename = "block_meta")]
  block_meta: Option<::models::BlockQueryBlockMeta>,
  #[serde(rename = "block")]
  block: Option<::models::Block>
}

impl BlockQuery {
  pub fn new() -> BlockQuery {
    BlockQuery {
      block_meta: None,
      block: None
    }
  }

  pub fn set_block_meta(&mut self, block_meta: ::models::BlockQueryBlockMeta) {
    self.block_meta = Some(block_meta);
  }

  pub fn with_block_meta(mut self, block_meta: ::models::BlockQueryBlockMeta) -> BlockQuery {
    self.block_meta = Some(block_meta);
    self
  }

  pub fn block_meta(&self) -> Option<&::models::BlockQueryBlockMeta> {
    self.block_meta.as_ref()
  }

  pub fn reset_block_meta(&mut self) {
    self.block_meta = None;
  }

  pub fn set_block(&mut self, block: ::models::Block) {
    self.block = Some(block);
  }

  pub fn with_block(mut self, block: ::models::Block) -> BlockQuery {
    self.block = Some(block);
    self
  }

  pub fn block(&self) -> Option<&::models::Block> {
    self.block.as_ref()
  }

  pub fn reset_block(&mut self) {
    self.block = None;
  }

}



