/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BlockQueryBlockMeta {
  #[serde(rename = "header")]
  header: Option<::models::BlockHeader>,
  #[serde(rename = "block_id")]
  block_id: Option<::models::BlockId>
}

impl BlockQueryBlockMeta {
  pub fn new() -> BlockQueryBlockMeta {
    BlockQueryBlockMeta {
      header: None,
      block_id: None
    }
  }

  pub fn set_header(&mut self, header: ::models::BlockHeader) {
    self.header = Some(header);
  }

  pub fn with_header(mut self, header: ::models::BlockHeader) -> BlockQueryBlockMeta {
    self.header = Some(header);
    self
  }

  pub fn header(&self) -> Option<&::models::BlockHeader> {
    self.header.as_ref()
  }

  pub fn reset_header(&mut self) {
    self.header = None;
  }

  pub fn set_block_id(&mut self, block_id: ::models::BlockId) {
    self.block_id = Some(block_id);
  }

  pub fn with_block_id(mut self, block_id: ::models::BlockId) -> BlockQueryBlockMeta {
    self.block_id = Some(block_id);
    self
  }

  pub fn block_id(&self) -> Option<&::models::BlockId> {
    self.block_id.as_ref()
  }

  pub fn reset_block_id(&mut self) {
    self.block_id = None;
  }

}



