/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BlockIdParts {
  #[serde(rename = "total")]
  total: Option<f32>,
  #[serde(rename = "hash")]
  hash: Option<::models::Hash>
}

impl BlockIdParts {
  pub fn new() -> BlockIdParts {
    BlockIdParts {
      total: None,
      hash: None
    }
  }

  pub fn set_total(&mut self, total: f32) {
    self.total = Some(total);
  }

  pub fn with_total(mut self, total: f32) -> BlockIdParts {
    self.total = Some(total);
    self
  }

  pub fn total(&self) -> Option<&f32> {
    self.total.as_ref()
  }

  pub fn reset_total(&mut self) {
    self.total = None;
  }

  pub fn set_hash(&mut self, hash: ::models::Hash) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: ::models::Hash) -> BlockIdParts {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&::models::Hash> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

}



