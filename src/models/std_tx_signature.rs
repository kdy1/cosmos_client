/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StdTxSignature {
  #[serde(rename = "signature")]
  signature: Option<String>,
  #[serde(rename = "pub_key")]
  pub_key: Option<::models::StdTxSignaturePubKey>,
  #[serde(rename = "account_number")]
  account_number: Option<String>,
  #[serde(rename = "sequence")]
  sequence: Option<String>
}

impl StdTxSignature {
  pub fn new() -> StdTxSignature {
    StdTxSignature {
      signature: None,
      pub_key: None,
      account_number: None,
      sequence: None
    }
  }

  pub fn set_signature(&mut self, signature: String) {
    self.signature = Some(signature);
  }

  pub fn with_signature(mut self, signature: String) -> StdTxSignature {
    self.signature = Some(signature);
    self
  }

  pub fn signature(&self) -> Option<&String> {
    self.signature.as_ref()
  }

  pub fn reset_signature(&mut self) {
    self.signature = None;
  }

  pub fn set_pub_key(&mut self, pub_key: ::models::StdTxSignaturePubKey) {
    self.pub_key = Some(pub_key);
  }

  pub fn with_pub_key(mut self, pub_key: ::models::StdTxSignaturePubKey) -> StdTxSignature {
    self.pub_key = Some(pub_key);
    self
  }

  pub fn pub_key(&self) -> Option<&::models::StdTxSignaturePubKey> {
    self.pub_key.as_ref()
  }

  pub fn reset_pub_key(&mut self) {
    self.pub_key = None;
  }

  pub fn set_account_number(&mut self, account_number: String) {
    self.account_number = Some(account_number);
  }

  pub fn with_account_number(mut self, account_number: String) -> StdTxSignature {
    self.account_number = Some(account_number);
    self
  }

  pub fn account_number(&self) -> Option<&String> {
    self.account_number.as_ref()
  }

  pub fn reset_account_number(&mut self) {
    self.account_number = None;
  }

  pub fn set_sequence(&mut self, sequence: String) {
    self.sequence = Some(sequence);
  }

  pub fn with_sequence(mut self, sequence: String) -> StdTxSignature {
    self.sequence = Some(sequence);
    self
  }

  pub fn sequence(&self) -> Option<&String> {
    self.sequence.as_ref()
  }

  pub fn reset_sequence(&mut self) {
    self.sequence = None;
  }

}



