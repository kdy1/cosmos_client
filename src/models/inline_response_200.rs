/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse200 {
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "moniker")]
  moniker: Option<String>,
  #[serde(rename = "protocol_version")]
  protocol_version: Option<::models::InlineResponse200ProtocolVersion>,
  #[serde(rename = "network")]
  network: Option<String>,
  #[serde(rename = "channels")]
  channels: Option<String>,
  #[serde(rename = "listen_addr")]
  listen_addr: Option<String>,
  /// Tendermint version
  #[serde(rename = "version")]
  version: Option<String>,
  #[serde(rename = "other")]
  other: Option<::models::InlineResponse200Other>
}

impl InlineResponse200 {
  pub fn new() -> InlineResponse200 {
    InlineResponse200 {
      id: None,
      moniker: None,
      protocol_version: None,
      network: None,
      channels: None,
      listen_addr: None,
      version: None,
      other: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> InlineResponse200 {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_moniker(&mut self, moniker: String) {
    self.moniker = Some(moniker);
  }

  pub fn with_moniker(mut self, moniker: String) -> InlineResponse200 {
    self.moniker = Some(moniker);
    self
  }

  pub fn moniker(&self) -> Option<&String> {
    self.moniker.as_ref()
  }

  pub fn reset_moniker(&mut self) {
    self.moniker = None;
  }

  pub fn set_protocol_version(&mut self, protocol_version: ::models::InlineResponse200ProtocolVersion) {
    self.protocol_version = Some(protocol_version);
  }

  pub fn with_protocol_version(mut self, protocol_version: ::models::InlineResponse200ProtocolVersion) -> InlineResponse200 {
    self.protocol_version = Some(protocol_version);
    self
  }

  pub fn protocol_version(&self) -> Option<&::models::InlineResponse200ProtocolVersion> {
    self.protocol_version.as_ref()
  }

  pub fn reset_protocol_version(&mut self) {
    self.protocol_version = None;
  }

  pub fn set_network(&mut self, network: String) {
    self.network = Some(network);
  }

  pub fn with_network(mut self, network: String) -> InlineResponse200 {
    self.network = Some(network);
    self
  }

  pub fn network(&self) -> Option<&String> {
    self.network.as_ref()
  }

  pub fn reset_network(&mut self) {
    self.network = None;
  }

  pub fn set_channels(&mut self, channels: String) {
    self.channels = Some(channels);
  }

  pub fn with_channels(mut self, channels: String) -> InlineResponse200 {
    self.channels = Some(channels);
    self
  }

  pub fn channels(&self) -> Option<&String> {
    self.channels.as_ref()
  }

  pub fn reset_channels(&mut self) {
    self.channels = None;
  }

  pub fn set_listen_addr(&mut self, listen_addr: String) {
    self.listen_addr = Some(listen_addr);
  }

  pub fn with_listen_addr(mut self, listen_addr: String) -> InlineResponse200 {
    self.listen_addr = Some(listen_addr);
    self
  }

  pub fn listen_addr(&self) -> Option<&String> {
    self.listen_addr.as_ref()
  }

  pub fn reset_listen_addr(&mut self) {
    self.listen_addr = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> InlineResponse200 {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

  pub fn set_other(&mut self, other: ::models::InlineResponse200Other) {
    self.other = Some(other);
  }

  pub fn with_other(mut self, other: ::models::InlineResponse200Other) -> InlineResponse200 {
    self.other = Some(other);
    self
  }

  pub fn other(&self) -> Option<&::models::InlineResponse200Other> {
    self.other.as_ref()
  }

  pub fn reset_other(&mut self) {
    self.other = None;
  }

}



