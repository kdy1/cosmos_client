/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse2005 {
  #[serde(rename = "inflation_rate_change")]
  inflation_rate_change: Option<String>,
  #[serde(rename = "inflation_max")]
  inflation_max: Option<String>,
  #[serde(rename = "inflation_min")]
  inflation_min: Option<String>,
  #[serde(rename = "goal_bonded")]
  goal_bonded: Option<String>,
  #[serde(rename = "unbonding_time")]
  unbonding_time: Option<String>,
  #[serde(rename = "max_validators")]
  max_validators: Option<i32>,
  #[serde(rename = "bond_denom")]
  bond_denom: Option<String>
}

impl InlineResponse2005 {
  pub fn new() -> InlineResponse2005 {
    InlineResponse2005 {
      inflation_rate_change: None,
      inflation_max: None,
      inflation_min: None,
      goal_bonded: None,
      unbonding_time: None,
      max_validators: None,
      bond_denom: None
    }
  }

  pub fn set_inflation_rate_change(&mut self, inflation_rate_change: String) {
    self.inflation_rate_change = Some(inflation_rate_change);
  }

  pub fn with_inflation_rate_change(mut self, inflation_rate_change: String) -> InlineResponse2005 {
    self.inflation_rate_change = Some(inflation_rate_change);
    self
  }

  pub fn inflation_rate_change(&self) -> Option<&String> {
    self.inflation_rate_change.as_ref()
  }

  pub fn reset_inflation_rate_change(&mut self) {
    self.inflation_rate_change = None;
  }

  pub fn set_inflation_max(&mut self, inflation_max: String) {
    self.inflation_max = Some(inflation_max);
  }

  pub fn with_inflation_max(mut self, inflation_max: String) -> InlineResponse2005 {
    self.inflation_max = Some(inflation_max);
    self
  }

  pub fn inflation_max(&self) -> Option<&String> {
    self.inflation_max.as_ref()
  }

  pub fn reset_inflation_max(&mut self) {
    self.inflation_max = None;
  }

  pub fn set_inflation_min(&mut self, inflation_min: String) {
    self.inflation_min = Some(inflation_min);
  }

  pub fn with_inflation_min(mut self, inflation_min: String) -> InlineResponse2005 {
    self.inflation_min = Some(inflation_min);
    self
  }

  pub fn inflation_min(&self) -> Option<&String> {
    self.inflation_min.as_ref()
  }

  pub fn reset_inflation_min(&mut self) {
    self.inflation_min = None;
  }

  pub fn set_goal_bonded(&mut self, goal_bonded: String) {
    self.goal_bonded = Some(goal_bonded);
  }

  pub fn with_goal_bonded(mut self, goal_bonded: String) -> InlineResponse2005 {
    self.goal_bonded = Some(goal_bonded);
    self
  }

  pub fn goal_bonded(&self) -> Option<&String> {
    self.goal_bonded.as_ref()
  }

  pub fn reset_goal_bonded(&mut self) {
    self.goal_bonded = None;
  }

  pub fn set_unbonding_time(&mut self, unbonding_time: String) {
    self.unbonding_time = Some(unbonding_time);
  }

  pub fn with_unbonding_time(mut self, unbonding_time: String) -> InlineResponse2005 {
    self.unbonding_time = Some(unbonding_time);
    self
  }

  pub fn unbonding_time(&self) -> Option<&String> {
    self.unbonding_time.as_ref()
  }

  pub fn reset_unbonding_time(&mut self) {
    self.unbonding_time = None;
  }

  pub fn set_max_validators(&mut self, max_validators: i32) {
    self.max_validators = Some(max_validators);
  }

  pub fn with_max_validators(mut self, max_validators: i32) -> InlineResponse2005 {
    self.max_validators = Some(max_validators);
    self
  }

  pub fn max_validators(&self) -> Option<&i32> {
    self.max_validators.as_ref()
  }

  pub fn reset_max_validators(&mut self) {
    self.max_validators = None;
  }

  pub fn set_bond_denom(&mut self, bond_denom: String) {
    self.bond_denom = Some(bond_denom);
  }

  pub fn with_bond_denom(mut self, bond_denom: String) -> InlineResponse2005 {
    self.bond_denom = Some(bond_denom);
    self
  }

  pub fn bond_denom(&self) -> Option<&String> {
    self.bond_denom.as_ref()
  }

  pub fn reset_bond_denom(&mut self) {
    self.bond_denom = None;
  }

}



