/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PostProposalBody {
  #[serde(rename = "base_req")]
  base_req: Option<::models::BaseReq>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "proposal_type")]
  proposal_type: Option<String>,
  #[serde(rename = "proposer")]
  proposer: Option<::models::Address>,
  #[serde(rename = "initial_deposit")]
  initial_deposit: Option<Vec<::models::Coin>>
}

impl PostProposalBody {
  pub fn new() -> PostProposalBody {
    PostProposalBody {
      base_req: None,
      title: None,
      description: None,
      proposal_type: None,
      proposer: None,
      initial_deposit: None
    }
  }

  pub fn set_base_req(&mut self, base_req: ::models::BaseReq) {
    self.base_req = Some(base_req);
  }

  pub fn with_base_req(mut self, base_req: ::models::BaseReq) -> PostProposalBody {
    self.base_req = Some(base_req);
    self
  }

  pub fn base_req(&self) -> Option<&::models::BaseReq> {
    self.base_req.as_ref()
  }

  pub fn reset_base_req(&mut self) {
    self.base_req = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> PostProposalBody {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> PostProposalBody {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_proposal_type(&mut self, proposal_type: String) {
    self.proposal_type = Some(proposal_type);
  }

  pub fn with_proposal_type(mut self, proposal_type: String) -> PostProposalBody {
    self.proposal_type = Some(proposal_type);
    self
  }

  pub fn proposal_type(&self) -> Option<&String> {
    self.proposal_type.as_ref()
  }

  pub fn reset_proposal_type(&mut self) {
    self.proposal_type = None;
  }

  pub fn set_proposer(&mut self, proposer: ::models::Address) {
    self.proposer = Some(proposer);
  }

  pub fn with_proposer(mut self, proposer: ::models::Address) -> PostProposalBody {
    self.proposer = Some(proposer);
    self
  }

  pub fn proposer(&self) -> Option<&::models::Address> {
    self.proposer.as_ref()
  }

  pub fn reset_proposer(&mut self) {
    self.proposer = None;
  }

  pub fn set_initial_deposit(&mut self, initial_deposit: Vec<::models::Coin>) {
    self.initial_deposit = Some(initial_deposit);
  }

  pub fn with_initial_deposit(mut self, initial_deposit: Vec<::models::Coin>) -> PostProposalBody {
    self.initial_deposit = Some(initial_deposit);
    self
  }

  pub fn initial_deposit(&self) -> Option<&Vec<::models::Coin>> {
    self.initial_deposit.as_ref()
  }

  pub fn reset_initial_deposit(&mut self) {
    self.initial_deposit = None;
  }

}



