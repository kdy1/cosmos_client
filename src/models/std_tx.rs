/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StdTx {
  #[serde(rename = "msg")]
  msg: Option<Vec<::models::Msg>>,
  #[serde(rename = "fee")]
  fee: Option<::models::StdTxFee>,
  #[serde(rename = "memo")]
  memo: Option<String>,
  #[serde(rename = "signature")]
  signature: Option<::models::StdTxSignature>
}

impl StdTx {
  pub fn new() -> StdTx {
    StdTx {
      msg: None,
      fee: None,
      memo: None,
      signature: None
    }
  }

  pub fn set_msg(&mut self, msg: Vec<::models::Msg>) {
    self.msg = Some(msg);
  }

  pub fn with_msg(mut self, msg: Vec<::models::Msg>) -> StdTx {
    self.msg = Some(msg);
    self
  }

  pub fn msg(&self) -> Option<&Vec<::models::Msg>> {
    self.msg.as_ref()
  }

  pub fn reset_msg(&mut self) {
    self.msg = None;
  }

  pub fn set_fee(&mut self, fee: ::models::StdTxFee) {
    self.fee = Some(fee);
  }

  pub fn with_fee(mut self, fee: ::models::StdTxFee) -> StdTx {
    self.fee = Some(fee);
    self
  }

  pub fn fee(&self) -> Option<&::models::StdTxFee> {
    self.fee.as_ref()
  }

  pub fn reset_fee(&mut self) {
    self.fee = None;
  }

  pub fn set_memo(&mut self, memo: String) {
    self.memo = Some(memo);
  }

  pub fn with_memo(mut self, memo: String) -> StdTx {
    self.memo = Some(memo);
    self
  }

  pub fn memo(&self) -> Option<&String> {
    self.memo.as_ref()
  }

  pub fn reset_memo(&mut self) {
    self.memo = None;
  }

  pub fn set_signature(&mut self, signature: ::models::StdTxSignature) {
    self.signature = Some(signature);
  }

  pub fn with_signature(mut self, signature: ::models::StdTxSignature) -> StdTx {
    self.signature = Some(signature);
    self
  }

  pub fn signature(&self) -> Option<&::models::StdTxSignature> {
    self.signature.as_ref()
  }

  pub fn reset_signature(&mut self) {
    self.signature = None;
  }

}



