/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TxQueryResult {
  #[serde(rename = "log")]
  log: Option<String>,
  #[serde(rename = "gas_wanted")]
  gas_wanted: Option<String>,
  #[serde(rename = "gas_used")]
  gas_used: Option<String>,
  #[serde(rename = "tags")]
  tags: Option<Vec<::models::KvPair>>
}

impl TxQueryResult {
  pub fn new() -> TxQueryResult {
    TxQueryResult {
      log: None,
      gas_wanted: None,
      gas_used: None,
      tags: None
    }
  }

  pub fn set_log(&mut self, log: String) {
    self.log = Some(log);
  }

  pub fn with_log(mut self, log: String) -> TxQueryResult {
    self.log = Some(log);
    self
  }

  pub fn log(&self) -> Option<&String> {
    self.log.as_ref()
  }

  pub fn reset_log(&mut self) {
    self.log = None;
  }

  pub fn set_gas_wanted(&mut self, gas_wanted: String) {
    self.gas_wanted = Some(gas_wanted);
  }

  pub fn with_gas_wanted(mut self, gas_wanted: String) -> TxQueryResult {
    self.gas_wanted = Some(gas_wanted);
    self
  }

  pub fn gas_wanted(&self) -> Option<&String> {
    self.gas_wanted.as_ref()
  }

  pub fn reset_gas_wanted(&mut self) {
    self.gas_wanted = None;
  }

  pub fn set_gas_used(&mut self, gas_used: String) {
    self.gas_used = Some(gas_used);
  }

  pub fn with_gas_used(mut self, gas_used: String) -> TxQueryResult {
    self.gas_used = Some(gas_used);
    self
  }

  pub fn gas_used(&self) -> Option<&String> {
    self.gas_used.as_ref()
  }

  pub fn reset_gas_used(&mut self) {
    self.gas_used = None;
  }

  pub fn set_tags(&mut self, tags: Vec<::models::KvPair>) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: Vec<::models::KvPair>) -> TxQueryResult {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&Vec<::models::KvPair>> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

}



