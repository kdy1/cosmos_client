/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Account {
  #[serde(rename = "base_req")]
  base_req: Option<::models::BaseReq>,
  #[serde(rename = "amount")]
  amount: Option<Vec<::models::Coin>>
}

impl Account {
  pub fn new() -> Account {
    Account {
      base_req: None,
      amount: None
    }
  }

  pub fn set_base_req(&mut self, base_req: ::models::BaseReq) {
    self.base_req = Some(base_req);
  }

  pub fn with_base_req(mut self, base_req: ::models::BaseReq) -> Account {
    self.base_req = Some(base_req);
    self
  }

  pub fn base_req(&self) -> Option<&::models::BaseReq> {
    self.base_req.as_ref()
  }

  pub fn reset_base_req(&mut self) {
    self.base_req = None;
  }

  pub fn set_amount(&mut self, amount: Vec<::models::Coin>) {
    self.amount = Some(amount);
  }

  pub fn with_amount(mut self, amount: Vec<::models::Coin>) -> Account {
    self.amount = Some(amount);
    self
  }

  pub fn amount(&self) -> Option<&Vec<::models::Coin>> {
    self.amount.as_ref()
  }

  pub fn reset_amount(&mut self) {
    self.amount = None;
  }

}



