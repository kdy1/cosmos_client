/* 
 * Gaia-Lite for Cosmos
 *
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BroadcastTxCommitResult {
  #[serde(rename = "check_tx")]
  check_tx: Option<::models::CheckTxResult>,
  #[serde(rename = "deliver_tx")]
  deliver_tx: Option<::models::DeliverTxResult>,
  #[serde(rename = "hash")]
  hash: Option<::models::Hash>,
  #[serde(rename = "height")]
  height: Option<i32>
}

impl BroadcastTxCommitResult {
  pub fn new() -> BroadcastTxCommitResult {
    BroadcastTxCommitResult {
      check_tx: None,
      deliver_tx: None,
      hash: None,
      height: None
    }
  }

  pub fn set_check_tx(&mut self, check_tx: ::models::CheckTxResult) {
    self.check_tx = Some(check_tx);
  }

  pub fn with_check_tx(mut self, check_tx: ::models::CheckTxResult) -> BroadcastTxCommitResult {
    self.check_tx = Some(check_tx);
    self
  }

  pub fn check_tx(&self) -> Option<&::models::CheckTxResult> {
    self.check_tx.as_ref()
  }

  pub fn reset_check_tx(&mut self) {
    self.check_tx = None;
  }

  pub fn set_deliver_tx(&mut self, deliver_tx: ::models::DeliverTxResult) {
    self.deliver_tx = Some(deliver_tx);
  }

  pub fn with_deliver_tx(mut self, deliver_tx: ::models::DeliverTxResult) -> BroadcastTxCommitResult {
    self.deliver_tx = Some(deliver_tx);
    self
  }

  pub fn deliver_tx(&self) -> Option<&::models::DeliverTxResult> {
    self.deliver_tx.as_ref()
  }

  pub fn reset_deliver_tx(&mut self) {
    self.deliver_tx = None;
  }

  pub fn set_hash(&mut self, hash: ::models::Hash) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: ::models::Hash) -> BroadcastTxCommitResult {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&::models::Hash> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_height(&mut self, height: i32) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: i32) -> BroadcastTxCommitResult {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&i32> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

}



